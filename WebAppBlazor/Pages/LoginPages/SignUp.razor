@layout CentredCardLayout
@page "/SignUp"
@using WebAppBlazor.Data;
@using WebAppBlazor.Data.Models;
@using WebAppBlazor.Services;
@using Newtonsoft.Json;
@using WebAppBlazor.Services.ServiceA;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IPassesServiceA passesService

			<EditForm Model="@user" OnValidSubmit="@ValidateUser">
				<div>
					<br /><br />
				</div>
	<div>
		<h3 style="font-weight:bold; color:purple">Сервис для записи и </h3>
		<h3 style="font-weight:bold; color:purple">бронировании помещений</h3>
				</div>
				<div>
					<br />
				</div>
				<div class="col-12 row"style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.FirstName" placeholder="Имя"  style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.LastName" placeholder="Фамилия" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.MiddleName" placeholder="Отчесвто" style="width:300px" />
				</div>
				<br />
				<div class="col-12 row"style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.PhoneNumber" placeholder="+7 ХХХ ХХХ ХХ ХХ"  style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="email" class="form-control col-8" @bind="user.EMail" placeholder="e-mail" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row"style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.Pass.UserLogin" placeholder="Логин" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="password" class="form-control col-8" @bind="user.Pass.PasswordHash" placeholder="Пароль" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="password" class="form-control col-8" @bind="pass" placeholder="Подтвердите пароль" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="submit" class="form-control col-6 btn btn-primary" value="Зарегистрироваться" style="width:300px"/>
					<div class="col-12 row" ></div>
					<a href="/Login" style="width:fit-content">Уже есть аккаунт? Войдите в него!</a>
				</div>
				<br />
				<ValidationMess IsVisible="IsVisible" result="1" renderFragment="@LoginMessadge"/>
				<DataAnnotationsValidator/>
				<ValidationSummary />
			</EditForm>


@code {

	private UserTable user;
	private string pass;

	public string LoginMessadge { get; set; }

	public bool IsVisible { get; set; }

	protected override Task OnInitializedAsync()
	{
		user = new UserTable();
		user.Pass = new Pass();
		return base.OnInitializedAsync();
	}

	private async Task<bool> ValidateUser()
	{
		if (pass != user.Pass.PasswordHash)
		{ 
			LoginMessadge = "Пароли не совпадают!";
			IsVisible = true;
			return await Task.FromResult(false);
		}
		try
		{
			UserTable user2 = new UserTable(user);
			if (await passesService.SignUpAsync(user))
			{
				NavigationManager.NavigateTo("/Login");
				return await Task.FromResult(true);
			}
			LoginMessadge = "Данный логин уже занят. Попробуйте другой!";
			IsVisible = true;
			return await Task.FromResult(false);
		}
		catch (Exception ex)
		{
			LoginMessadge = "Не удалось подключится к серверу! Повторите попытку позже.";
			IsVisible = true;
			return await Task.FromResult(false);
		}
	}
}