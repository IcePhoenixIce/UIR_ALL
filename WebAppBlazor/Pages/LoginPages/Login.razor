@layout CentredCardLayout
@page "/Login"
@using WebAppBlazor.Data;
@using WebAppBlazor.Data.Models;
@using WebAppBlazor.Services;
@using Newtonsoft.Json;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IPassesServiceA passesServiceA
@inject IPassesServiceB passesServiceB
 

			<EditForm Model="@user" OnValidSubmit="@ValidateUser">
				<div>
					<br /><br />
				</div>
				<div>
					<h3 style="font-weight:bold; color:purple">Сервис для записи и </h3>
					<h3 style="font-weight:bold; color:purple">бронировании помещений</h3>
				</div>
				<div>
					<br />
				</div>
				<div class="col-12 row"style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.UserLogin" placeholder="Логин" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="password" class="form-control col-8" @bind="user.PasswordHash" placeholder="Пароль" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="submit" class="form-control col-6 btn btn-primary" value="Войти" style="width:300px"/>
					<div class="col-12 row" ></div>
					<a href="/SignUp" style="width:fit-content">Зарегистироваться</a>
				</div>
				<br />
				<ValidationMess IsVisible="IsVisible" result="1" renderFragment="@LoginMessadge"/>
				<DataAnnotationsValidator />
				<ValidationSummary />
			</EditForm>

@code {

	private PassToken user;

	public string LoginMessadge { get; set; }

	public bool IsVisible { get; set; }

	protected override Task OnInitializedAsync()
	{
		IsVisible = false;
		user = new PassToken();
		return base.OnInitializedAsync();
	}

	private async Task<bool> ValidateUser()
	{
		PassToken pass2 = new PassToken(user);
		try
		{
			var returnedPassA = await passesServiceA.LoginAsync(pass2);
			var returnedPassB = await passesServiceB.LoginAsync(pass2);

			if (returnedPassA.Token != null && returnedPassB.Token != null)
			{
				((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedPassA.UserUir);

				NavigationManager.NavigateTo("/");

				await localStorage.SetItemAsync("user", JsonConvert.SerializeObject(returnedPassA.UserUir));
				await localStorage.SetItemAsync("tokenA", returnedPassA.Token);
				await localStorage.SetItemAsync("tokenB", returnedPassB.Token);
				return await Task.FromResult(true);
			}
			else
			{
				LoginMessadge = "Неправильный логин или пароль!";
				IsVisible = true;
				return await Task.FromResult(false);
			}
		}
		catch (Exception ex)
		{
			//Заглушка на обработку ошибок.
			LoginMessadge = "Не удалось подключится к серверу! Повторите попытку позже.";
			IsVisible = true;
			return await Task.FromResult(false);
		}

	}
}