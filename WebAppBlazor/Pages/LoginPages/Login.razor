@layout CentredCardLayout
@page "/Login"
@using System.Text;
@using WebAppBlazor.Data;
@using WebAppBlazor.Data.Models;
@using Newtonsoft.Json;
@using System.Security.Cryptography;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient http
 

			<EditForm Model="@user" OnValidSubmit="@ValidateUser">
				<div>
					<br /><br />
				</div>
				<div>
					<h3 style="font-weight:bold; color:purple">Book Stores Login</h3>
				</div>
				<div>
					<br />
				</div>
				<div class="col-12 row"style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input class="form-control col-8" @bind="user.UserLogin" placeholder="Login" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<input type="password" class="form-control col-8" @bind="user.PasswordHash" placeholder="Password" style="width:300px"/>
				</div>
				<br />
				<div class="col-12 row" style="display:flex; flex-direction:row; flex-wrap:wrap; justify-content:center; align-items:center;">
					<span class="col-8"></span>
					<input type="submit" class="form-control col-6 btn btn-primary" value="Login" style="width:300px"/>
					<div class="col-12 row" ></div>
					<a href="/SignUp" style="width:fit-content">Sign Up</a>
				</div>
				<br />
				<ValidationMess IsVisible="IsVisible" result="1" renderFragment="@LoginMessadge"/>
			</EditForm>

@code {

	private PassToken user;

	public string LoginMessadge { get; set; }

	public bool IsVisible { get; set; }

	protected override Task OnInitializedAsync()
	{
		IsVisible = false;
		user = new PassToken();
		return base.OnInitializedAsync();
	}

	private async Task<bool> ValidateUser()
	{
		//Сделаю это в веб-приложении, сейчас заглушка тут
		byte[] bytes = Encoding.UTF8.GetBytes(user.PasswordHash);
		SHA256Managed hashstring = new SHA256Managed();
		byte[] hash = hashstring.ComputeHash(bytes);
		string hashString = string.Empty;
		foreach (byte x in hash)
		{
			hashString += String.Format("{0:x2}", x);
		}
		PassToken user2 = new PassToken(user);
		user2.PasswordHash = hashString;

		try
		{
			var mess = await http.PostAsJsonAsync<PassToken>("https://localhost:7057/api/Passes/Login", user2);

			var responseStatusCode = mess.StatusCode;

			if (responseStatusCode == System.Net.HttpStatusCode.OK)
			{
				var responseBody = await mess.Content.ReadAsStringAsync();
				var returned_user = JsonConvert.DeserializeObject<PassToken>(responseBody);

				((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returned_user.UserUir.FirstName);

				NavigationManager.NavigateTo("/");

				await localStorage.SetItemAsync("name", returned_user.UserUir.FirstName);
				await localStorage.SetItemAsync("token", returned_user.Token);
				return await Task.FromResult(true);
			}
			else
			{
				LoginMessadge = "Неправильный логин или пароль!";
				IsVisible = true;
				return await Task.FromResult(false);
			}
		}
		catch (Exception ex)
		{
			//Заглушка на обработку ошибок.
			LoginMessadge = "Не удалось подключится к серверу! Повторите попытку позже.";
			IsVisible = true;
			return await Task.FromResult(false);
		}

	}
}