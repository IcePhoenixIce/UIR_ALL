@using WebAppBlazor.Data.Models;
@using WebAppBlazor.Services;
@inject DialogService DialogService
@inject IRecordsCurrentService rcs
@inject IAppointmentCurrentService acs
@inject NavigationManager NavigationManager

<RadzenTemplateForm TItem="RecordService" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Специалист: " />
        </div>
        <div class="col">
            <RadzenLabel Text="@specialist.Specialization" />
        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="ФИО: " />
        </div>
        <div class="col">
            <RadzenLabel Text="@specialist_str" />
        </div>
    </div>
    @if (!simple)
    {
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Комната: " />
            </div>
            <div class="col">
                <RadzenLabel Text="@room_str" />
            </div>
        </div>

        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Адрес: " />
            </div>
            <div class="col">
                <RadzenLabel Text="@adress" />
            </div>
        </div>
    }
    
    
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Цена: " />
        </div>
        <div class="col">
            <RadzenLabel Text="@Appointment.PriceStr" />
        </div>
    </div>


    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton Click=@(args => OnSubmit()) Text="Записаться!" />
        </div>
    </div>

</RadzenTemplateForm>
@code {
    [Parameter]
    public RecordService Appointment { get; set; }

    [Parameter]
    public SpecialistName specialist { get; set; }

    public string specialist_str { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public Room room { get; set; }

    [Parameter]
    public Area area { get; set; }

    [Parameter]
    public bool simple { get; set; }

    public string room_str { get; set; }

    public string adress { get; set; }


    bool IsVisible = false;

    string MessageString = "Время записи не может выходить за первоначальные границы!";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        specialist_str = specialist.FirstName + " " + specialist.LastName + " " + specialist.MiddleName;
        if(!simple)
        {
            room_str = room.RoomNumber;
            adress = area.AreaLocation;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    async Task<bool> OnSubmit()
    {
        var appointment = new AppointmentCurrent 
            { 
                UserUirId = UserId,
                SpecialistId = specialist.SpecialistId,
                From1 = Appointment.From1,
                To1 = Appointment.To1
            };

        appointment = await acs.PostAppointmentAsync(appointment);

        if (appointment == null)
        {
            MessageString = "Запись не выполнена, попробуйте записаться еще раз!";
            IsVisible = true;
            await InvokeAsync(StateHasChanged);
            Thread.Sleep(5000);
            DialogService.Close();
            NavigationManager.NavigateTo("/Zapisi/Add");               
            return await Task.FromResult(false);
        }

        if (simple)
        {
            DialogService.Close();
            NavigationManager.NavigateTo("/User/Appointmets");
            return await Task.FromResult(true);
        }

        var record = new RecordCurrent
            {
                UserUirId = UserId,
                RoomId = room.RoomId,
                From1 = Appointment.From1,
                To1 = Appointment.To1,
                InvitesCurrents = new List<InvitesCurrent>
                {
                    new InvitesCurrent
                    {   
                        RecordId = 0,
                        UserUirId = specialist.SpecialistId,
                        AdditionalInfo = Appointment.PriceRoom.ToString()
                    }
                }
            };
        record = await rcs.PostRecordAsync(record);

        if (record == null)
        {
            MessageString = "Запись не выполнена, попробуйте записаться еще раз!";
            IsVisible = true;
            await InvokeAsync(StateHasChanged);
            //Thread.Sleep(5000);
            DialogService.Close();
            NavigationManager.NavigateTo("/Zapisi/Add");
            await acs.DeleteAppointmentCurrentUser(appointment.AppointmentId);
            return await Task.FromResult(false);
        }
        DialogService.Close();
        NavigationManager.NavigateTo("/User/Appointmets");
        return await Task.FromResult(true);
    }
}
