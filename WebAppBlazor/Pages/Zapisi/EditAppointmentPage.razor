@using WebAppBlazor.Data.Models;
@using WebAppBlazor.Services.ServiceB;
@using WebAppBlazor.Services.ServiceA;
@inject DialogService DialogService
@inject IRecordsCurrentService rcs
@inject IAppointmentCurrentService acs
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<RadzenTemplateForm TItem="RecordService" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Специалист: " />
        </div>
        <div class="col">
            <RadzenLabel Text="@specialist.Specialization" />
        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="ФИО: " />
        </div>
        <div class="col">
            <RadzenLabel Text="@specialist_str" />
        </div>
    </div>
    @if (!simple)
    {
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Комната: " />
            </div>
            <div class="col">
                <RadzenLabel Text="@room_str" />
            </div>
        </div>

        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Адрес: " />
            </div>
            <div class="col">
                <RadzenLabel Text="@adress" />
            </div>
        </div>
    }
    
    
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Цена: " />
        </div>
        <div class="col">
            <RadzenLabel Text="@sumRecord.PriceStr" />
        </div>
    </div>


    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton Click=@(args => OnSubmit()) Text="Записаться!" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public List<RecordService> Appointment { get; set; }

    RecordService sumRecord;

    [Parameter]
    public Specialist specialist { get; set; }

    public string specialist_str { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public Room room { get; set; }

    [Parameter]
    public Area area { get; set; }

    [Parameter]
    public bool simple { get; set; }

    public string room_str { get; set; }

    public string adress { get; set; }

    string MessageString = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        specialist_str = specialist.LastName + " " + specialist.FirstName + " " + specialist.MiddleName;
        if(!simple)
        {
            room_str = room.RoomNumber;
            adress = area.AreaLocation;
        }

        sumRecord = new RecordService() { From1 = Appointment[0].From1, To1 = Appointment[0].To1, Price = 0, PriceRoom = 0 };

        foreach (RecordService rec in Appointment)
        {
            if (rec.From1 < sumRecord.From1)
                sumRecord.From1 = rec.From1;
            else
                sumRecord.To1 = rec.To1;
            sumRecord.Price += rec.Price;
            sumRecord.PriceRoom += rec.PriceRoom;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    async Task<bool> OnSubmit()
    {
        var appointment = new AppointmentCurrent
            {
                UserUirId = UserId,
                SpecialistId = specialist.SpecialistId,
                From1 = sumRecord.From1,
                To1 = sumRecord.To1
            };

        appointment = await acs.PostAppointmentAsync(appointment);

        if (appointment == null)
        {
            MessageString = "Запись не выполнена, попробуйте записаться еще раз!";
            await JS.InvokeVoidAsync("window.myFunctions.showAlert", MessageString);
            await InvokeAsync(StateHasChanged);
            DialogService.Close();
            NavigationManager.NavigateTo("/Zapisi/Add");
            return await Task.FromResult(false);
        }

        if (simple)
        {
            DialogService.Close();
            NavigationManager.NavigateTo("/User/Appointmets");
            return await Task.FromResult(true);
        }
        try
        {
            var record = new RecordCurrent
                {
                    UserUirId = UserId,
                    RoomId = room.RoomId,
                    Room = room,
                    From1 = sumRecord.From1,
                    To1 = sumRecord.To1,
                    InvitesCurrents = new List<InvitesCurrent>
                {
                    new InvitesCurrent
                    {
                        RecordId = 0,
                        UserUirId = specialist.SpecialistId,
                        AdditionalInfo = sumRecord.PriceRoom.ToString()
                    }
                }
                };
            await rcs.PostRecordAsync(record);
            DialogService.Close();
            NavigationManager.NavigateTo("/User/Appointmets");
            return await Task.FromResult(true);
        }
        catch (Exception ex)
        {
            MessageString = "Запись не выполнена, попробуйте записаться еще раз!";
            await JS.InvokeVoidAsync("window.myFunctions.showAlert", MessageString);
            await InvokeAsync(StateHasChanged);
            DialogService.Close();
            NavigationManager.NavigateTo("/Zapisi/Add");
            await acs.DeleteAppointmentCurrentUser(appointment.AppointmentId);
            return await Task.FromResult(false);
        }
    }
}
