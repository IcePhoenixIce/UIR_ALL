@page "/Zapisi/Add"
@using System.Linq.Dynamic.Core;
@using WebAppBlazor.Data.Models;
@using WebAppBlazor.Services;
@using Newtonsoft.Json;
@inject ISpecialistService ss
@inject IAreaService areas
@inject IRoomService rs
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject DialogService DialogService

@*<RadzenExample Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() { "EditAppointmentPage.razor" })/>*@

<div>
	<div class="col-12 row">
		<div class="col">
			<RadzenLabel Text="Упрощенный режим консультации (Онлайн)" />
		</div>
		<div class="col">
			<RadzenSelectBar @bind-Value=@simplifiedConsultation TValue="bool" class="mb-5" Change=@(args => OnChangeSimpl(args, "Simplified mode"))>
				<Items>
					<RadzenSelectBarItem Text="Да" Value="true" />
					<RadzenSelectBarItem Text="Нет" Value="false" />
				</Items>
			</RadzenSelectBar>
		</div>
	</div>
	<div class="col-12 row">
		<RadzenCard>
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Выберите специалиста: </RadzenText>
			<RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
									Data=@(specList) Style="width: 100%" AllowColumnResize="true"
									TextProperty="LastName" ValueProperty="SpecialistId" AllowFilteringByAllStringColumns="true"
									Change=@(args => OnChangeSpec(args, "DropDownDataGrid with filtering by all string columns"))>
				<Columns>
					<RadzenDropDownDataGridColumn Property="LastName" Title="Фамилия" Width="50px" />
					<RadzenDropDownDataGridColumn Property="FirstName" Title="Имя" Width="50px" />
					<RadzenDropDownDataGridColumn Property="Specialization" Title="Специальность" Width="100px" />
					<RadzenDropDownDataGridColumn Property="Degree" Title="Должность" Width="50px" />
				</Columns>
			</RadzenDropDownDataGrid>
		</RadzenCard>
	</div>
	<div class="col-12 row">
		<RadzenCard Visible=@(IsVisibleArea && !simplifiedConsultation)>
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Выберите здание</RadzenText>
			<RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
									Data=@(areaList) Style="width: 100%" AllowColumnResize="true"
									TextProperty="AreaName" ValueProperty="AreaId" AllowFilteringByAllStringColumns="true"
									Change=@(args => OnChangeArea(args, "DropDownDataGrid with filtering by all string columns"))>
				<Columns>
					<RadzenDropDownDataGridColumn Property="AreaName" Title="Название" Width="50px" />
					<RadzenDropDownDataGridColumn Property="AreaLocation" Title="Адрес" Width="50px" />
				</Columns>
			</RadzenDropDownDataGrid>
		</RadzenCard>
	</div>
	<div class="col-12 row">
		<RadzenCard Visible=@(IsVisibleRoom && !simplifiedConsultation)>
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Выберите комнату</RadzenText>
			<RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
									Data=@(roomList) Style="width: 100%" AllowColumnResize="true"
									TextProperty="RoomNumber" ValueProperty="RoomId" AllowFilteringByAllStringColumns="true"
									Change=@(args => OnChangeRoom(args, "DropDownDataGrid with filtering by all string columns"))>
				<Columns>
					<RadzenDropDownDataGridColumn Property="RoomNumber" Title="Название" Width="50px" />
					<RadzenDropDownDataGridColumn Property="AdditionalInformation" Title="Адрес" Width="200px" />
				</Columns>
			</RadzenDropDownDataGrid>
		</RadzenCard>
	</div>
	<div class="col-12 row" style="display:@IsVisibleRecords; height:900px">
			<RadzenScheduler @ref=@scheduler TItem="RecordService" Data=@data TItem="RecordService" StartProperty="From1" EndProperty="To1" TextProperty="PriceStr" 
				AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender Style="height:900px">
			<RadzenWeekView />
		</RadzenScheduler>
	</div>
</div>

@code {
	IEnumerable<SpecialistName> specList;
	IEnumerable<Area> areaList;
	List<Room> roomList;
	SpecialistName specialist;
	Room room;
	Area area;
	int userId;
	bool IsVisibleArea = false;
	bool IsVisibleRoom = false;
	bool simplifiedConsultation = false;
	string IsVisibleRecords = "none";

	RadzenScheduler<RecordService> scheduler;



	List<RecordService> data = new List<RecordService>();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		var userJson = await localStorage.GetItemAsync<string>("user");
		userId = JsonConvert.DeserializeObject<UserTable>(userJson).UserUirId;
		specList = await ss.SpecialistsAsync();
		areaList = await areas.AreasAsync();
	}



	async void OnChangeSimpl(object value, string name)
	{

		if (IsVisibleArea && simplifiedConsultation)
		{
			data = (await ss.GetAppointmentCurrentSpec(specialist.SpecialistId)).Value.Item2.Values.SelectMany(x => x).ToList();
			IsVisibleRecords = "flex";
		}
		else
			IsVisibleRecords = "none";
		await InvokeAsync(StateHasChanged);
	}

	async void OnChangeSpec(object value, string name)
	{
		var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
		specialist = await ss.SpecialistAsync((int)value);
		IsVisibleArea = true;
		IsVisibleRoom = false;
		if (simplifiedConsultation)
		{
			data = (await ss.GetAppointmentCurrentSpec(specialist.SpecialistId)).Value.Item2.Values.SelectMany(x => x).ToList();
			IsVisibleRecords = "flex";
		}
		else
			IsVisibleRecords = "none";
		await InvokeAsync(StateHasChanged);
	}

	async void OnChangeArea(object value, string name)
	{
		var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
		roomList = (await rs.RoomsAsync((int)value)).ToList();
		var specroomList = specialist.Rooms.ToList();
		roomList.RemoveAll(item => specroomList.Contains(item));
		area = areaList.Where(ar => ar.AreaId == (int)value).FirstOrDefault();
		if (roomList.Count() > 0)
		{
			IsVisibleRoom = true;
			IsVisibleRecords = "none";
		}
		else
		{
			name = "Нет подходящих комнат для данного здания!";
		}
		await InvokeAsync(StateHasChanged);
	}

	async void OnChangeRoom(object value, string name)
	{
		var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
		IsVisibleRecords = "flex";
		var roomShedule = await rs.RoomAsync((int)value);
		room = roomShedule.Value.Item1;
		var specShedule = await ss.GetAppointmentCurrentSpec(specialist.SpecialistId);
		data.Clear();
		foreach (KeyValuePair<DateTime, IEnumerable<RecordService>> room_buff in roomShedule.Value.Item2)
		{
			var specDayShedule = specShedule.Value.Item2[room_buff.Key];
			var result = room_buff.Value.Join(specDayShedule,
				r1 => new { r1.From1, r1.To1 }, // ключ для первой коллекции
				r2 => new { r2.From1, r2.To1 }, // ключ для второй коллекции
				(r1, r2) => new RecordService // результат
					{
						SpecID = r1.SpecID,
						From1 = r1.From1,
						To1 = r1.To1,
						Price = r1.Price + r2.Price,
						PriceRoom = r1.Price,
						IsBooked = r1.IsBooked || r2.IsBooked
					});
			data.AddRange(result);
		}
		await InvokeAsync(StateHasChanged);
		await scheduler.Reload();
	}

	async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<RecordService> args)
	{
		if (args.Data.IsBooked)
			return;
		await DialogService.OpenAsync<EditAppointmentPage>("Записаться", 
		new Dictionary<string, object> 
			{ 
				{ "Appointment", args.Data }, 
				{ "specialist", specialist },
				{ "UserId",  userId},
				{ "Room", room },
				{ "Area", area },
				{ "simple", simplifiedConsultation}
				});

		await scheduler.Reload();
	}

	void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<RecordService> args)
	{
		// Never call StateHasChanged in AppointmentRender - would lead to infinite loop

		if (args.Data.IsBooked)
		{
			args.Attributes["style"] = "background: grey";
		}
	}
}
